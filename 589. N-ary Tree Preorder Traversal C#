/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,IList<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/

public class Solution {
    public IList<int> Preorder(Node root) {
        List<int> solutionList = new List<int>();     //List to hold the node values
        if (root == null){return solutionList;}       //Empty root case
        solutionList.Add(root.val);                   //Add current root to the list
        if(root.children != null){                    //Until reached the leafs
          for (int i = 0;i<root.children.Count;i++)   
            {   
                solutionList.AddRange(Preorder(root.children[i]));    //recursion with each child as a root
            }
        }
        return solutionList;

       
    }
}
